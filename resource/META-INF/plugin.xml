<idea-plugin>
  <id>com.zenuml.jetbrains</id>
  <name>ZenUML support</name>
  <version>2019.1.2</version>
  <idea-version since-build="191.6707.31"/>
  <vendor url="http://www.zenuml.com">ZenUML</vendor>

  <depends>com.intellij.modules.lang</depends>
  <depends optional="true" config-file="plugin-intelliLang.xml">org.intellij.intelliLang</depends>

  <description><![CDATA[
<p>Provides the capability to generate sequence diagram from text within the IDE and see the rendered HTML in a live preview.
</br>
</br>
Includes the following features:</p>
<ul>
<li>Generate diagrams from Java via context menu.</li>
<li>Instant rendering - nothing needs to be sent to the backend.</li>
<li>Developer friendly syntax - e.g. Service.getBook(id).</li>
<li>Syntax highlighting - coming soon.</li>
<li>Ability to use custom stylesheets for a live preview.</li>
</ul>
]]></description>

  <change-notes><![CDATA[
<ul>
  <li>
    <strong>Java Converter</strong>
    <ul>
      <li>
      	<strong>Support parameters of root method:</strong>
        <pre><em> Java: method(int i) => DSL: method(i)</em></pre>
      </li>
      <li>
        <strong>Support parameters of a constructor method:</strong>
        <pre><em> Java: public Constructor(int i) => DSL: new Constructor(i)</em></pre>
      </li>
      <li>
        <strong>Support statements in a constructor method:</strong>
        <pre><em> Java: Constructor() { impl() } => DSL: new Constructor() { impl() }</em></pre>
      </li>
      <li>
        <strong>Support try/catch in Java:</strong>
        <pre><em> try { ... } catch (Exception e) { ... }</em></pre>
      </li>
      <li>
        <strong>Ignore generic type parameter in java. (Generic type is not supported in ZenUML DSL)</strong>
        <pre><em> Java: ArrayList&lt;Integer&gt; integers = new ArrayList&lt;&gt;(); => DSL: ArrayList integers = new ArrayList();</em></pre>
       </li>
    </ul>
  </li>
  <li>
    <strong>DSL Preview</strong>
    <ul>
      <li>
        <strong>Allow 'new' keyword in a method's parameters:</strong>
        <pre><em> method( new X() )</em></pre>
      </li>
      <li>
        <strong>Allow calling method in a methods' parameters:</strong>
        <pre><em> method( A.anotherMethod() )</em></pre>
      </li>
    </ul>
  </li>
</ul>
    ]]>
  </change-notes>

  <project-components>
    <component>
      <implementation-class>org.intellij.sequencer.SequencePlugin2</implementation-class>
      <interface-class>org.intellij.sequencer.SequencePlugin2</interface-class>
      <option name="workspace" value="true"/>
    </component>
  </project-components>

  <extensionPoints>
    <extensionPoint qualifiedName="org.intellij.zenuml.html.panel.provider"
                    interface="org.intellij.plugins.markdown.ui.preview.MarkdownHtmlPanelProvider" />
    <extensionPoint qualifiedName="org.intellij.zenuml.fenceLanguageProvider"
                    interface="org.intellij.plugins.markdown.injection.CodeFenceLanguageProvider" />
    <extensionPoint qualifiedName="org.intellij.zenuml.codeFencePluginGeneratingProvider"
                    interface="org.intellij.plugins.markdown.extensions.MarkdownCodeFencePluginGeneratingProvider" />
  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">
    <fileTypeFactory implementation="org.intellij.plugins.markdown.lang.MarkdownFileTypeFactory"/>
    <lang.parserDefinition language="ZenUML" implementationClass="org.intellij.plugins.markdown.lang.parser.MarkdownParserDefinition"/>
    <lang.ast.factory language="ZenUML" implementationClass="org.intellij.plugins.markdown.lang.psi.MarkdownASTFactory"/>

    <lang.elementManipulator forClass="org.intellij.plugins.markdown.lang.psi.impl.ZenUmlCodeFenceImpl"
                             implementationClass="org.intellij.plugins.markdown.lang.psi.impl.ZenUmlCodeFenceImpl$Manipulator"/>
    <lang.elementManipulator forClass="org.intellij.plugins.markdown.lang.psi.impl.ZenUmlLinkDestinationImpl"
                             implementationClass="org.intellij.plugins.markdown.lang.psi.impl.ZenUmlLinkDestinationImpl$Manipulator"/>

    <!--<colorSettingsPage implementation="org.intellij.plugins.markdown.highlighting.MarkdownColorSettingsPage"/>-->
    <!--<syntaxHighlighter key="ZenUML" implementationClass="org.intellij.plugins.markdown.highlighting.MarkdownSyntaxHighlighter"/>-->
    <additionalTextAttributes scheme="Default" file="colorSchemes/MarkdownDefault.xml"/>
    <additionalTextAttributes scheme="Darcula" file="colorSchemes/MarkdownDarcula.xml"/>

    <braceMatcher filetype="ZenUML" implementationClass="org.intellij.plugins.markdown.braces.MarkdownBraceMatcher"/>
    <quoteHandler fileType="ZenUML" className="org.intellij.plugins.markdown.braces.MarkdownQuoteHandler"/>
    <typedHandler implementation="org.intellij.plugins.markdown.editor.MarkdownTypedHandler"/>

    <bidiRegionsSeparator language="ZenUML" implementationClass="org.intellij.plugins.markdown.editor.MarkdownBidiRegionsSeparator"/>

    <annotator language="ZenUML" implementationClass="org.intellij.plugins.markdown.highlighting.MarkdownHighlightingAnnotator"/>

    <multiHostInjector implementation="org.intellij.plugins.markdown.injection.CodeFenceInjector"/>

    <completion.contributor language="ZenUML"
                            implementationClass="org.intellij.plugins.markdown.injection.LanguageListCompletionContributor"/>

    <fileEditorProvider implementation="org.intellij.plugins.markdown.ui.preview.MarkdownSplitEditorProvider"/>

    <spellchecker.support language="ZenUML"
                          implementationClass="org.intellij.plugins.markdown.spellchecking.MarkdownSpellcheckingStrategy"/>

    <applicationConfigurable id="Settings.ZenUml"
                             bundle="org.intellij.plugins.markdown.bundle.MarkdownBundle"
                             groupId="language"
                             nonDefaultProject="true"
                             key="markdown.settings.name"
                             instance="org.intellij.plugins.markdown.settings.MarkdownSettingsConfigurable">
    </applicationConfigurable>
    <applicationService serviceImplementation="org.intellij.plugins.markdown.settings.ZenUmlApplicationSettings"/>
    <applicationService serviceImplementation="org.intellij.plugins.markdown.ui.preview.ZenUmlCodeFencePluginCache"/>
    <lang.psiStructureViewFactory language="ZenUML"
                                  implementationClass="org.intellij.plugins.markdown.structureView.MarkdownStructureViewFactory"/>
    <psi.referenceContributor implementation="org.intellij.plugins.markdown.lang.references.MarkdownReferenceProvider"/>
    <stripTrailingSpacesFilterFactory implementation="org.intellij.plugins.markdown.editor.MarkdownStripTrailingSpacesFilterFactory"/>
    <httpRequestHandler implementation="org.intellij.plugins.markdown.ui.preview.PreviewStaticServer"/>

    <localInspection shortName="ZenUmlUnresolvedFileReference" bundle="org.intellij.plugins.markdown.bundle.MarkdownBundle"
                     key="zenuml.placeholder.inspection.name" groupKey="zenuml.inspection.group.ruby.name"
                     enabledByDefault="true" level="WARNING"
                     implementationClass="org.intellij.plugins.markdown.lang.references.ZenUmlUnresolvedFileReferenceInspection"/>

    <lang.foldingBuilder language="ZenUML" implementationClass="org.intellij.plugins.markdown.folding.MarkdownFoldingBuilder"/>
    <stubIndex implementation="org.intellij.plugins.markdown.lang.index.MarkdownHeadersIndex"/>
    <anchorReferenceProvider implementation="org.intellij.plugins.markdown.lang.references.MarkdownAnchorPathReferenceProvider"/>
    <todoIndexer filetype="ZenUML" implementationClass="org.intellij.plugins.markdown.highlighting.MarkdownTodoIndexer" />
    <indexPatternBuilder implementation="org.intellij.plugins.markdown.highlighting.MarkdownIndexPatternBuilder" />
    <langCodeStyleSettingsProvider implementation="org.intellij.plugins.markdown.lang.formatter.MarkdownLanguageCodeStyleSettingsProvider"/>
    <enterHandlerDelegate implementation="org.intellij.plugins.markdown.editor.MarkdownEnterHandler"/>

    <applicationService serviceImplementation="org.intellij.sequencer.config.Configuration2"/>
  </extensions>

  <extensions defaultExtensionNs="org.intellij.zenuml">
    <html.panel.provider implementation="org.intellij.plugins.markdown.ui.preview.javafx.JavaFxHtmlPanelProvider" />
    <fenceLanguageProvider implementation="org.intellij.plugins.markdown.extensions.plantuml.PlantUMLCodeFenceLanguageProvider"/>
    <codeFencePluginGeneratingProvider implementation="org.intellij.plugins.markdown.extensions.plantuml.PlantUMLProvider"/>
  </extensions>

  <actions>
    <group id="ZenUml.Toolbar.Left" class="com.intellij.openapi.actionSystem.DefaultActionGroup" text="Markdown editor actions">

      <action class="com.zenuml.sequence.plugins.jetbrains.actions.DocumentationAction"
              id="com.zenuml.sequence.plugins.jetbrains.actions.DocumentationAction"
              text="Documentation"
              description="Open documentation"
              icon="MarkdownIcons.EditorActions.Help">
      </action>
    </group>


    <action class="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlCyclicSplitLayoutChangeAction"
            id="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlCyclicSplitLayoutChangeAction"
            text="Change split layout"
            description="Toggle markdown editor layout through different values (editor only, preview only, wysiwyg split)"
            icon="AllIcons.Actions.PreviewDetails"
            use-shortcut-of="ParameterInfo">
    </action>

    <group id="ZenUml.Toolbar.Right" class="com.intellij.openapi.actionSystem.DefaultActionGroup" text="Markdown editor layout actions">
      <action class="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlEditorOnlyLayoutChangeAction"
              id="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlEditorOnlyLayoutChangeAction"
              text="Show editor only"
              description="Sets markdown editor layout to show editor only"
              icon="AllIcons.General.LayoutEditorOnly">
      </action>
      <action class="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlEditorAndPreviewLayoutChangeAction"
              id="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlEditorAndPreviewLayoutChangeAction"
              text="Show editor and preview"
              description="Sets markdown editor layout to show editor and preview in split"
              icon="AllIcons.General.LayoutEditorPreview">
      </action>
      <action class="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlPreviewOnlyLayoutChangeAction"
              id="org.intellij.plugins.markdown.ui.actions.editorLayout.ZenUmlPreviewOnlyLayoutChangeAction"
              text="Show preview only"
              description="Sets markdown editor layout to show preview only"
              icon="AllIcons.General.LayoutPreviewOnly">
      </action>

      <action class="com.zenuml.sequence.plugins.jetbrains.actions.OpenInBrowserAction"
              id="com.zenuml.sequence.plugins.jetbrains.actions.OpenInBrowserAction"
              text="Open in browser"
              description="Open in browser"
              icon="AllIcons.General.Web">
      </action>
    </group>

    <action id="SequencePlugin.ShowZenUMLScratch" class="org.intellij.sequencer.ShowZenUMLScratchAction"
            icon="SequencePluginIcons.SEQUENCE_ICON"
            text="Sequence Diagram (experimental)..." description="Generate sequence diagram of the current method">
      <add-to-group group-id="EditorPopupMenu" anchor="last"/>
      <add-to-group group-id="ToolsMenu" anchor="last"/>
    </action>
  </actions>

  <product-descriptor code="PZENUML" release-date="20190601" release-version="20191" />
</idea-plugin>